generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma-second-db"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL2")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// @@Gen.model(hide: true)
model account2 {
  pelak     String?  @db.Char(6)
  month     String?  @db.Char(7)
  fine      Float?   @db.Money
  bedehi    Float?   @db.Money
  mazad     Float?   @db.Money
  ofname    String?  @db.Char(30)
  olname    String?  @db.Char(40)
  id        Decimal? @db.Decimal(18, 0)
  pricebill Float?   @db.Money
  alertpic  Bytes?   @db.Image
  newsharj  Float?   @db.Money
  finepar   Float?   @db.Money
  bedehipar Float?   @db.Money
  notpaypar Int?
  rent      Float?   @db.Money
  gift      Float?   @db.Money
  giftold   Float?   @db.Money
  Rolpic    Bytes?   @db.Image
  act       String?  @db.Char(1)

  @@ignore
}

/// @@Gen.model(hide: true)
model bank {
  code     Int     @id(map: "PK_bank") @default(autoincrement())
  bank     String? @db.Char(30)
  shobe    String? @db.Char(30)
  numhesab String? @db.Char(20)
  malhesab String? @db.Char(100)
  nov      String? @db.NChar(10)
}

/// @@Gen.model(hide: true)
model bill {
  id        Int     @id(map: "PK_bill") @default(autoincrement())
  pelak     String? @db.Char(6)
  monthbill String? @db.Char(7)
  bedehi    Float?  @db.Money
  fine      Float?  @db.Money
  price     Float?  @db.Money
  pricebill Float?  @db.Money
}

/// @@Gen.model(hide: true)
model Ejareh {
  sanad         String  @id(map: "PK_Ejareh") @db.NChar(13)
  pelak         String? @db.NChar(6)
  month         String? @db.NChar(7)
  deadline      String? @db.NChar(10)
  fine          Float?  @db.Money
  pricebill     Float?  @db.Money
  pricebill2    Float?  @db.Money
  bedehi        Float?  @db.Money
  mazad         Float?  @db.Money
  sumbill       Float?  @db.Money
  payment       Float?  @db.Money
  datepay       String? @db.NChar(10)
  novpay        String? @db.NChar(20)
  number        String? @db.NChar(20)
  fineold       Float?  @db.Money
  bedehiold     Float?  @db.Money
  rent          Float?  @db.Money
  rent2         Float?  @db.Money
  notpay        Int?
  notpayold     Int?
  bedehidovreh  Float?  @db.Money
  bedehidovreh2 Float?  @db.Money
  count         Int?
  count2        Int?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// @@Gen.model(hide: true)
model fine {
  fineprice Float? @db.Money

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// @@Gen.model(hide: true)
model GD1 {
  ttpra Float?  @db.Money
  ttpr1 Float?  @db.Money
  ttpr2 Float?  @db.Money
  ttnra Float?  @db.Money
  ttnr1 Float?  @db.Money
  ttnr2 Float?  @db.Money
  tfpra Float?  @db.Money
  tfpr1 Float?  @db.Money
  tfpr2 Float?  @db.Money
  tfnra Float?  @db.Money
  tfnr1 Float?  @db.Money
  tfnr2 Float?  @db.Money
  gpra  Float?  @db.Money
  gpr1  Float?  @db.Money
  gpr2  Float?  @db.Money
  gnra  Float?  @db.Money
  gnr1  Float?  @db.Money
  gnr2  Float?  @db.Money
  mpra  Float?  @db.Money
  mpr1  Float?  @db.Money
  mpr2  Float?  @db.Money
  mnra  Float?  @db.Money
  mnr1  Float?  @db.Money
  mnr2  Float?  @db.Money
  month String? @db.Char(7)

  @@ignore
}

/// @@Gen.model(hide: true)
model history {
  row       Int     @id(map: "PK_history") @default(autoincrement())
  usern     String? @db.Char(20)
  date      String? @db.Char(10)
  time      String? @db.Char(12)
  tablename String? @db.Char(15)
  action    String? @db.Char(20)
  rowkey    String? @db.Char(20)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// @@Gen.model(hide: true)
model license {
  licensekey String? @db.NChar(22)
  id         Int     @default(autoincrement())

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// @@Gen.model(hide: true)
model MP {
  pelak      String? @db.NChar(6)
  monthcount Int?
  sal        Int?
  pricebill  Float?  @db.Money
  sum        Float?  @db.Money
  fineold    Float?  @db.Money
  payment    Float?  @db.Money

  @@ignore
}

/// @@Gen.model(hide: true)
model option1 {
  payam       String? @db.Char(300)
  message     String? @db.Char(1)
  alert       String? @db.Char(1)
  pic         Bytes?  @db.Image
  payam2      String? @db.Char(300)
  downmessage String? @db.Char(1)
  payamE      String? @db.NChar(200)
  underPayam  String? @db.NChar(300)
  RolPic      Bytes?  @db.Image
  maliPic     Bytes?  @db.Image
  id          BigInt  @id(map: "PK_option1") @default(autoincrement())
}

/// @@Gen.model(hide: true)
model owner {
  trow        Int         @id(map: "PK_owner") @default(autoincrement())
  pelak       String?     @db.Char(6)
  tfname      String?     @db.NVarChar(50)
  tlname      String?     @db.NVarChar(50)
  tfather     String?     @db.NVarChar(50)
  tjob        String?     @db.NVarChar(250)
  tmobile     String?     @db.NVarChar(50)
  ttel        String?     @db.NVarChar(50)
  taddress    String?     @db.NVarChar(250)
  tmeli       String?     @db.NVarChar(50)
  sex         String?     @db.NVarChar(50)
  cposti      String?     @db.NVarChar(50)
  storePelak  String?     @db.NVarChar(50)
  changeOwner String?     @db.NChar(10)
  Doc_files   Doc_files[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// @@Gen.model(hide: true)
model owner2 {
  pelak  String? @db.Char(6)
  ofname String? @db.Char(30)
  olname String? @db.Char(40)
  month  String? @db.Char(7)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// @@Gen.model(hide: true)
model securety {
  code        String? @db.Char(13)
  username    String? @db.Char(20)
  password    String? @db.Char(10)
  store       String? @db.NChar(1)
  sharj       String? @db.NChar(1)
  option      String? @db.NChar(1)
  owner       String? @db.NChar(1)
  tenant      String? @db.NChar(1)
  account     String? @db.NChar(1)
  securety    String? @db.NChar(1)
  ejareh      String? @db.NChar(1)
  fact        String? @db.NChar(1)
  file        String? @db.NChar(1)
  edit        String? @db.NChar(1)
  printsharj  String? @db.NChar(1)
  printejareh String? @db.NChar(1)
  SG          String? @db.NChar(1)
  Rol         String? @db.NChar(1)
  id          BigInt  @default(autoincrement())

  @@ignore
}

/// @@Gen.model(hide: true)
model sharj {
  sharj  Float? @db.Money
  rent   Float? @db.Money
  rent2  Float? @db.Money
  sharj1 Float? @db.Money
  sharj2 Float? @db.Money
  sharjG Float? @db.Money
  sharj3 Float? @db.Money
  id     BigInt @id(map: "PK_sharj") @default(autoincrement())
}

model store {
  id       Int     @unique @default(autoincrement())
  pelak    String  @id(map: "PK_store") @db.Char(6)
  nov      Int?
  name     String? @db.NVarChar(150)
  metraj   Float?
  bazar    Int?
  tabagh   Int?
  rahro    Int?
  tel1     String? @db.NVarChar(50)
  username String? @db.NVarChar(50)
  password String? @db.NVarChar(50)

  tel2     String?  @db.NVarChar(50)
  cposti   String?  @db.NVarChar(50)
  rent     Float?   @db.Money
  active   Boolean?
  tovzeh   String?  @db.Char(400)
  ChekGift Boolean?
  ChekRol  String?  @db.NChar(1)
  fine3    String?  @db.NChar(1)
  malekmos String?  @db.NVarChar(50)

  Tahvil           String?            @db.NChar(10)
  created_at       String?            @db.NVarChar(50)
  updated_at       String?            @db.NVarChar(50)
  created_user     Int?
  updated_user     Int?
  chargeProfile    Int?
  ejareh           Decimal?           @db.Decimal(18, 0)
  tajmi            Boolean?
  aghsat           Boolean?
  changedate       String?            @db.NChar(10)
  Doc_files        Doc_files[]
  new_account      new_account[]
  sarghofli        sarghofli[]
  chargeDef        chargeDef?         @relation(fields: [chargeProfile], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_store__chargeDef")
  store            store              @relation("storeTostore", fields: [pelak], references: [pelak], onUpdate: NoAction, map: "FK_store_store")
  other_store      store?             @relation("storeTostore")
  types_bazar      types_bazar?       @relation(fields: [bazar], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_store_types_bazar")
  types_nov        types_nov?         @relation(fields: [nov], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_store_types_nov")
  types_rahro      types_rahro?       @relation(fields: [rahro], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_store_types_rahro")
  types_tabagh     types_tabagh?      @relation(fields: [tabagh], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_store_types_tabagh")
  stores_discounts stores_discounts[]

  @@index([pelak], map: "NonClusteredIndex-20230921-150557")
}

/// @@Gen.model(hide: true)
model Tenant {
  trow       Int     @id(map: "PK_Tenant") @default(autoincrement())
  pelak      String? @db.NVarChar(6)
  tfname     String? @db.NVarChar(50)
  tlname     String? @db.NVarChar(50)
  tfather    String? @db.NVarChar(50)
  tjob       String? @db.NVarChar(50)
  tmobile    String? @db.NVarChar(50)
  ttel       String? @db.NVarChar(50)
  taddress   String? @db.NVarChar(50)
  tmeli      String? @db.NVarChar(50)
  stdate     String? @db.NVarChar(50)
  endate     String? @db.NVarChar(50)
  sex        String? @db.NVarChar(50)
  cposti     String? @db.NVarChar(50)
  storePelak String? @db.NVarChar(50)
  disc       String? @db.NVarChar(Max)
  tablo      String? @db.NVarChar(Max)

  datemojavez String?     @db.NVarChar(50)
  Doc_files   Doc_files[]
}

model types_bazar {
  bazar String? @db.NVarChar(50)
  id    Int     @id(map: "PK_types_bazar") @default(autoincrement())
  store store[]
}

model types_nov {
  nov             String?    @db.NVarChar(50)
  id              Int        @id(map: "PK_types_nov") @default(autoincrement())
  store           store[]
  types_nov       types_nov  @relation("types_novTotypes_nov", fields: [id], references: [id], onUpdate: NoAction, map: "FK_types_nov_types_nov")
  other_types_nov types_nov? @relation("types_novTotypes_nov")
}

model types_rahro {
  rahro String? @db.NVarChar(50)
  id    Int     @id(map: "PK_types_rahro") @default(autoincrement())
  store store[]
}

model types_tabagh {
  tabagh String? @db.NVarChar(50)
  id     Int     @id(map: "PK_types_tabagh") @default(autoincrement())
  store  store[]
}

model Permission {
  id       Int      @id(map: "PK__Permission") @default(autoincrement())
  userID   Int?
  systemID Int?
  add      Boolean? @map("_add")
  view     Boolean? @map("_view")
  edit     Boolean? @map("_edit")
  print    Boolean? @map("_print")
  docadd   Boolean? @map("_docadd")
  docedit  Boolean? @map("_docedit")
  docview  Boolean? @map("_docview")

  Systems Systems? @relation(fields: [systemID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Permission__Systems")
  Users   Users?   @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Permission__Users")

  @@map("_Permission")
}

model Systems {
  id         Int          @id(map: "PK__Systems") @default(autoincrement())
  name       String?      @db.NVarChar(50)
  Permission Permission[]

  @@map("_Systems")
}

model Users {
  id                                      Int           @id(map: "PK__Users") @default(autoincrement())
  name                                    String?       @db.NVarChar(50)
  lname                                   String?       @db.NVarChar(50)
  username                                String?       @db.NVarChar(50)
  password                                String?       @db.NVarChar(50)
  role                                    String?       @db.NVarChar(50)
  active                                  Boolean?
  file_                                   String?       @db.NVarChar(50)
  Permission                              Permission[]
  Users                                   Users         @relation("UsersToUsers", fields: [id], references: [id], onUpdate: NoAction, map: "FK__Users__Users")
  other_Users                             Users?        @relation("UsersToUsers")
  new_account                             new_account[]
  sarghofli_sarghofli_updated_userToUsers sarghofli[]   @relation("sarghofli_updated_userToUsers")
  sarghofli_sarghofli_created_userToUsers sarghofli[]   @relation("sarghofli_created_userToUsers")

  @@map("_Users")
}

model account {
  sanad        String   @id(map: "PK_account") @db.Char(13)
  id           Decimal? @db.Decimal(18, 0)
  pelak        String?  @db.Char(6)
  month        String?  @db.Char(7)
  payment      Float?   @db.Money
  datepay      String?  @db.Char(10)
  deadline     String?  @db.Char(10)
  fine         Float?   @db.Money
  pricebill    Float?   @db.Money
  bedehi       Float?   @db.Money
  mazad        Float?   @db.Money
  sumbill      Float?   @db.Money
  novpay       String?  @db.Char(20)
  number       String?  @db.Char(20)
  fineold      Float?   @db.Money
  bedehiold    Float?   @db.Money
  sharj        Float?   @db.Money
  notpay       Int?
  finepar      Float?   @db.Money
  bedehipar    Float?   @db.Money
  notpaypar    Int?
  pricebillold Float?   @db.Money
  gift         Float?   @db.Money
  giftold      Float?   @db.Money
  act          String?  @db.Char(1)
}

model chargeDef {
  id             Int     @id(map: "PK__chargeDef") @default(autoincrement())
  name           String? @db.NVarChar(50)
  charge         Int?
  penaltyPersand Int?
  penaltyMonth   Int?
  type           String? @db.NVarChar(50)
  store          store[]
}

model new_account {
  id                  Int      @id(map: "PK__account") @default(autoincrement())
  pelak               String?  @db.Char(6)
  month               String?  @db.NVarChar(7)
  monthbill           Decimal  @default(0, map: "DF__account_monthbill") @db.Decimal(18, 0)
  debt                Decimal  @default(0, map: "DF__account_debt") @db.Decimal(18, 0)
  penalty             Decimal  @default(0, map: "DF__account_penalty") @db.Decimal(18, 0)
  deptPeriod          Int?
  deadline            String?  @db.NChar(10)
  isueeDate           String?  @db.NChar(10)
  TotalBill           Decimal? @db.Decimal(22, 0)
  paidBill            Decimal  @default(0, map: "DF__account_paidBill") @db.Decimal(18, 0)
  paidExtra           Decimal  @default(0, map: "DF__account_paidExtra") @db.Decimal(18, 0)
  paidDate            String?  @db.NChar(250)
  paidType            String?  @db.NChar(30)
  paidTime            String?  @db.NChar(10)
  discount            Decimal  @default(0, map: "DF__account_discount") @db.Decimal(18, 0)
  discription         String?  @db.NVarChar(250)
  discountDiscription String?  @db.NVarChar(250)
  paidExtraAsset      Decimal  @default(0, map: "DF_new_account_paidExtraAsset") @db.Decimal(18, 0)
  created_at          String?  @db.NVarChar(50)
  created_user        Int?
  updated_at          String?  @db.NVarChar(50)
  updated_user        Int?
  metraj              Float?
  tarif               Float?
  ezafPardakht        Decimal? @default(0, map: "DF_new_account_ezafPardakht") @db.Decimal(18, 0)
  fichnum             String?  @db.NVarChar(150)
  paidBill1           Decimal  @default(0, map: "DF_new_account_paidBill1") @db.Decimal(18, 0)
  paidBill2           Decimal  @default(0, map: "DF_new_account_paidBill2") @db.Decimal(18, 0)
  paidBill3           Decimal  @default(0, map: "DF_new_account_paidBill3") @db.Decimal(18, 0)
  paidDate1           String?  @db.NChar(250)
  paidDate2           String?  @db.NChar(250)
  paidDate3           String?  @db.NChar(250)
  fich1               String?  @db.NChar(250)
  fich2               String?  @db.NChar(250)
  fich3               String?  @db.NChar(250)

  onlineAmount     String? @db.NChar(50)
  cardnumber       String? @db.NChar(100)
  rrn              String? @db.NChar(50)
  tracenumber      String? @db.NChar(50)
  digitalreceipt   String? @db.NChar(250)
  datepaid         String? @db.NChar(50)
  respcode         String? @db.NChar(50)
  respmsg          String? @db.NChar(100)
  settele_Status   String? @db.NChar(50)
  settele_ReturnId String? @db.NChar(50)
  settele_Message  String? @db.NChar(100)

  basebill  Decimal?    @db.Decimal(18, 0)
  tarefe    BigInt?
  Users     Users?      @relation(fields: [created_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__new_account__Users")
  store     store?      @relation(fields: [pelak], references: [pelak], onDelete: NoAction, onUpdate: NoAction, map: "FK_new_account_store")
  Doc_files Doc_files[]

  @@index([pelak, month], map: "NonClusteredIndex-20230921-150212")
}

model excel {
  pelak         String   @id(map: "PK_excel") @db.Char(6)
  nov           Int?
  name          String?  @db.NVarChar(255)
  metraj        Float?
  bazar         Int?
  tabagh        Int?
  rahro         Int?
  tel1          String?  @db.NVarChar(50)
  tel2          String?  @db.NVarChar(50)
  cposti        String?  @db.NVarChar(50)
  rent          Float?   @db.Money
  active        Boolean?
  tovzeh        String?  @db.Char(400)
  ChekGift      Boolean?
  ChekRol       String?  @db.NChar(1)
  Tahvil        String?  @db.NChar(10)
  momo          String?  @db.NVarChar(255)
  created_at    String?  @db.NVarChar(50)
  updated_at    String?  @db.NVarChar(50)
  created_user  Int?
  updated_user  Int?
  chargeProfile Int?
}

model discountDef {
  id               Int                @id(map: "PK__discountDef") @default(autoincrement())
  name             String?            @db.NVarChar(50)
  discountPersand  Int?
  stores_discounts stores_discounts[]
}

model stores_discounts {
  id           Int          @id(map: "PK_stores_events") @default(autoincrement())
  discountID   Int?
  pelak        String?      @db.Char(6)
  created_at   String?      @db.NVarChar(50)
  updated_at   String?      @db.NVarChar(50)
  created_user Int?
  updated_user Int?
  discountDef  discountDef? @relation(fields: [discountID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_stores_discounts_discountDef")
  store        store?       @relation(fields: [pelak], references: [pelak], onDelete: NoAction, map: "FK_stores_events_store")
}

model sarghofli {
  id                                  Int         @id(map: "PK_sarghofli") @default(autoincrement())
  pelak                               String?     @db.Char(6)
  invitedate                          String?     @db.NChar(10)
  paydiscription                      String?     @db.NVarChar(Max)
  paydate                             String?     @db.NChar(10)
  price                               Decimal?    @db.Decimal(18, 0)
  disc                                String?     @db.NVarChar(Max)
  created_at                          String?     @db.NVarChar(50)
  created_user                        Int?
  updated_at                          String?     @db.NVarChar(50)
  updated_user                        Int?
  Users_sarghofli_updated_userToUsers Users?      @relation("sarghofli_updated_userToUsers", fields: [updated_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sarghofli__Users")
  Users_sarghofli_created_userToUsers Users?      @relation("sarghofli_created_userToUsers", fields: [created_user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_sarghofli__Users1")
  store                               store?      @relation(fields: [pelak], references: [pelak], onDelete: NoAction, onUpdate: NoAction, map: "FK_sarghofli_store1")
  Doc_files                           Doc_files[]
}

model Doc_cat {
  id            Int         @id(map: "PK_Doc_cat") @default(autoincrement())
  title         String?     @db.NVarChar(50)
  moduleId      BigInt?
  Doc_cat       Doc_cat     @relation("Doc_catToDoc_cat", fields: [id], references: [id], onUpdate: NoAction, map: "FK_Doc_cat_Doc_cat")
  other_Doc_cat Doc_cat?    @relation("Doc_catToDoc_cat")
  Doc_files     Doc_files[]
}

model Doc_files {
  id          Int          @id(map: "PK_Doc_files") @default(autoincrement())
  moduleID    Int?
  CatID       Int?
  name        String?      @db.NVarChar(250)
  date_       String?      @db.NChar(50)
  userID      Int?
  pelak       String?      @db.Char(6)
  rowId       Int?
  Doc_cat     Doc_cat?     @relation(fields: [CatID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Doc_files_Doc_cat")
  store       store?       @relation(fields: [rowId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Doc_files_Doc_files")
  owner       owner?       @relation(fields: [rowId], references: [trow], onDelete: NoAction, onUpdate: NoAction, map: "FK_Doc_files_Doc_files1")
  Tenant      Tenant?      @relation(fields: [rowId], references: [trow], onDelete: NoAction, onUpdate: NoAction, map: "FK_Doc_files_Tenant")
  sarghofli   sarghofli?   @relation(fields: [rowId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Doc_files_sarghofli")
  new_account new_account? @relation(fields: [rowId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Doc_files_new_account")
}
